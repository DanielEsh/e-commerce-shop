import * as R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)

export const getPhones = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)

    // const applySearchPrice = item => R.contains(
    //     state.phonesPage.price,
    //     R.prop('price', item)
    // )

    let filter;
    if (R.length(activeCategoryId) > 1) {
        filter = 'groupBy'
    } else {
        filter = 'categoryId'
    }
    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop(filter, item)
    )

    const phones = R.compose(
        // R.filter(applySearchPrice),
        R.when(R.always(activeCategoryId), R.filter(applyCategory)),
        R.map(id => getPhoneById(state, id))
    )(state.phonesPage.ids)


    return phones

}
export const getSearchFalse = (state) => {
  return state.phonesPage.searchError
}

export const getLoader= (state) => {
  return state.phonesPage.loader
}

export const getTotalBasketCount = state => R.length(state.basket)
export const getTotalWishlistCount = state => R.length(state.wishlist)

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        R.sum,
        R.pluck('price'),
        R.map(id => getPhoneById(state, id))
    )(state.basket)

    return totalPrice
}

export const getCategories = state => R.values(state.categories)
export const getGroups = state => R.values(state.groups)

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)
export const getActiveGroupId = ownProps => R.path(['match', 'params', 'id'], ownProps)


export const getBasketPhonesWithCount = state => {
    const phoneCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId)),
    )(state.basket)
    const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)
    const uniqueIds = R.uniq(state.basket)
    const phones = R.compose(
        R.map(phoneWithCount),
        R.map(id => getPhoneById(state, id)),
    )(uniqueIds)

    return phones
}
export const getWishlistPhonesWithCount = state => {
    const phoneCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.wishlist)
    const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)
    const uniqueIds = R.uniq(state.wishlist)
    const phones = R.compose(
        R.map(phoneWithCount),
        R.map(id => getPhoneById(state, id))
    )(uniqueIds)

    return phones
}
