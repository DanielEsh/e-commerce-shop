import React from 'react';
import PropTypes from 'prop-types';
import {connect} from "react-redux";

import {
    basketCheckout
} from 'actions'
import {
    getBasketPhonesWithCount,
    getTotalBasketPrice
} from 'selectors'
import FormErrors from './formErrors'


class Modal extends React.Component {
    constructor(props){
        super(props)

        this.state = {
            phones: props.phones,
            name: '',
            number:'',
            email:'',
            address:'',
            moreInfo:'',
            formErrors: {name: '', number: '', email: '', address:''},
            nameValid: false,
            numberValid: false,
            emailValid: false,
            addressValid:false,
            formValid: false
        }
    }

    change = (e) => {
        const {name, value } = e.target
        this.setState({ [name]: value},
            () => { this.validateField(name, value) })
    }

    validateField(fieldName, value) {
        let fieldValidationErrors = this.state.formErrors;
        let nameValid = this.state.nameValid;
        let emailValid = this.state.emailValid;
        let numberValid = this.state.numberValid;
        let addressValid = this.state.addressValid;
        switch(fieldName) {
            case 'name':
                nameValid = value.length >= 1;
                fieldValidationErrors.имя = nameValid ? '': ' должно быть заполнено';
                break;
            case 'email':
                emailValid = value.match(/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i);
                fieldValidationErrors.email = emailValid ? '' : ' не корректен';
                break;
            case 'number':
                numberValid = value.length >= 11;
                fieldValidationErrors.номер = numberValid ? '': ' слишком короткий';
                break;
            case 'address':
                addressValid = value.length >= 1;
                fieldValidationErrors.адрес = addressValid ? '': ' должен быть указан';
                break;
            default:
                break;
        }
        this.setState({formErrors: fieldValidationErrors,
            nameValid: nameValid,
            emailValid: emailValid,
            numberValid: numberValid,
            addressValid:addressValid
        }, this.validateForm);
    }
    validateForm() {
        this.setState({formValid: this.state.emailValid &&
                this.state.nameValid && this.state.numberValid && this.state.addressValid});
    }


    handleSubmit = (event) => {
        event.preventDefault()
        const {phones} = this.props
        let summId = [];
        for (let i = 0;i<phones.length;i++) {
            summId.push(phones[i].id);
        }

        let summCount = [];
        for (let i = 0;i<phones.length;i++) {
            summCount.push(phones[i].count);
        }

        let obj = {}
        obj['name'] = this.state.name;
        obj['number'] = this.state.number;
        obj['email'] = this.state.email;
        obj['address'] = this.state.address;
        obj['moreInfo'] = this.state.moreInfo;
        obj['goods'] = `${summId}`;
        obj['count'] = `${summCount}`;
        obj['totalPrice'] = `${this.props.totalPrice}`;
        let json = JSON.stringify(obj);
        console.log('json', json)

        let statusMessage = document.querySelector('.info')

        try {
            fetch('https://telephone.su/api/orders/add.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(obj)
            })

            statusMessage.innerHTML = 'Заказ успешно оформлен';
        } catch (error) {
            console.error('Ошибка', error)
        }



    }

    render() {
        const {name, number, email, address, moreInfo } = this.state
        return (
            <div>
                { this.props.isOpen &&
                <div className='modalOverlay'>
                    <div className='modalWindow'>
                        <div className='modalHeader'>
                            <div className='modalTitle'>
                                <h2>{this.props.title}</h2>
                            </div>
                            <div className='closeModal' onClick={this.props.onCancel}>
                                <i className="fa fa-times" aria-hidden="true"></i>
                            </div>
                        </div>
                        <div className='modalBody'>
                            <form onSubmit={this.handleSubmit} method='POST'>
                                <input className="input" type="name" name='name' placeholder="Введите ваше имя" value={name} onChange={this.change}/>
                                <input className="input" type="name" name='number' placeholder="Введите номер телефона" value={number} onChange={this.change}/>
                                <input className="input" type="email" name='email' placeholder="Введите почту" value={email} onChange={this.change}/>
                                <input className="input" type="name" name='address'placeholder="Введите адрес доставки" value={address} onChange={this.change}/>
                                <textarea placeholder="Дополнительная информация" name='moreInfo' value={moreInfo} onChange={this.change}></textarea>
                                <button type="submit" className='btn-red'
                                        disabled={!this.state.formValid}>Оформить заказа</button>
                            </form>

                        </div>
                        <div className='modalFooter'>
                            <div className='info'>
                                <FormErrors formErrors={this.state.formErrors} />
                            </div>
                        </div>
                    </div>
                </div>
                }
            </div>
        )
    }

}
const mapDispatchToProps = {
    basketCheckout
}
const mapStateToProps = state => {
    return {
        phones: getBasketPhonesWithCount(state),
        totalPrice: getTotalBasketPrice(state),
    }
}

Modal.propTypes = {
    title: PropTypes.string,
    isOpen: PropTypes.bool,
    onCancel: PropTypes.func,
    children: PropTypes.node
}

Modal.defaultProps = {
    title: 'Modal title',
    isOpen: false,
    onCancel: () => {},
}
export default connect(mapStateToProps, mapDispatchToProps)(Modal)
